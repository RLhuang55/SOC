$version Generated by VerilatedVcd $end
$date Sun Apr 23 15:44:53 2023
 $end
$timescale  10s $end

 $scope module top $end
  $var wire  1 F! clk_i $end
  $var wire  1 E! rst_i $end
  $scope module test_top $end
   $var wire  1 % ce_wire $end
   $var wire  1 F! clk_i $end
   $var wire  1 w ctrl_flush_jump_o $end
   $var wire 32 x ctrl_new_pc_o [31:0] $end
   $var wire  6 v ctrl_stall_o [5:0] $end
   $var wire  5 *! exe_jump_addr_o [4:0] $end
   $var wire  1 w exe_jump_enable_o $end
   $var wire 32 I! exe_mem_addr_o [31:0] $end
   $var wire 32 J! exe_mem_data_o [31:0] $end
   $var wire 32 3 exe_mem_mem_addr_o [31:0] $end
   $var wire 32 4 exe_mem_mem_data_o [31:0] $end
   $var wire  4 5 exe_mem_mem_op_o [3:0] $end
   $var wire  1 2 exe_mem_mem_we_o $end
   $var wire  4 K! exe_mem_op_o [3:0] $end
   $var wire  5 / exe_mem_reg_waddr_o [4:0] $end
   $var wire 32 1 exe_mem_reg_wdata_o [31:0] $end
   $var wire  1 0 exe_mem_reg_we_o $end
   $var wire  1 H! exe_mem_we_o $end
   $var wire  5 '! exe_reg_waddr_o [4:0] $end
   $var wire 32 )! exe_reg_wdata_o [31:0] $end
   $var wire  1 (! exe_reg_we_o $end
   $var wire  1 P! exe_stallreq_o $end
   $var wire  5 . id_exe_inst_addr_o [4:0] $end
   $var wire  1 : id_exe_inst_is_load_o $end
   $var wire 32 - id_exe_inst_o [31:0] $end
   $var wire 32 ) id_exe_op1_o [31:0] $end
   $var wire 32 * id_exe_op2_o [31:0] $end
   $var wire  5 9 id_exe_rd_o [4:0] $end
   $var wire  5 , id_exe_reg_waddr_o [4:0] $end
   $var wire  1 + id_exe_reg_we_o $end
   $var wire  5 z id_inst_addr_o [4:0] $end
   $var wire 32 y id_inst_o [31:0] $end
   $var wire 32 { id_op1_o [31:0] $end
   $var wire 32 | id_op2_o [31:0] $end
   $var wire  5 !! id_reg1_addr_o [4:0] $end
   $var wire  1 #! id_reg1_re_o $end
   $var wire  5 "! id_reg2_addr_o [4:0] $end
   $var wire  1 $! id_reg2_re_o $end
   $var wire  5 ~ id_reg_waddr_o [4:0] $end
   $var wire  1 } id_reg_we_o $end
   $var wire  1 ( id_stallreq_o $end
   $var wire 32 & if_id_inst_addr_o [31:0] $end
   $var wire 32 ' if_id_inst_o [31:0] $end
   $var wire 32 $ if_inst_addr_o [31:0] $end
   $var wire 32 G! if_inst_o [31:0] $end
   $var wire 32 .! mem_ram_addr_o [31:0] $end
   $var wire 32 1! mem_ram_data_i [31:0] $end
   $var wire 32 0! mem_ram_data_o [31:0] $end
   $var wire  1 /! mem_ram_w_request_o $end
   $var wire  5 +! mem_reg_waddr_o [4:0] $end
   $var wire 32 -! mem_reg_wdata_o [31:0] $end
   $var wire  1 ,! mem_reg_we_o $end
   $var wire  5 6 mem_wb_reg_waddr_o [4:0] $end
   $var wire 32 8 mem_wb_reg_wdata_o [31:0] $end
   $var wire  1 7 mem_wb_reg_we_o $end
   $var wire 32 $ pc_wire [31:0] $end
   $var wire 32 %! reg1_data_o [31:0] $end
   $var wire 32 &! reg2_data_o [31:0] $end
   $var wire  1 E! rst_i $end
   $scope module ctrl0 $end
    $var wire  1 w flush_jump_o $end
    $var wire 32 x jump_addr_i [31:0] $end
    $var wire  1 w jump_enable_i $end
    $var wire 32 x new_pc_o [31:0] $end
    $var wire  1 E! rst_i $end
    $var wire  6 v stall_o [5:0] $end
    $var wire  1 P! stallreq_from_exe_i $end
    $var wire  1 ( stallreq_from_id_i $end
   $upscope $end
   $scope module dpram0 $end
    $var wire 19 D! addr4 [18:0] $end
    $var wire 32 .! addr_i [31:0] $end
    $var wire  1 F! clk_i $end
    $var wire 32 0! data_i [31:0] $end
    $var wire 32 1! data_o [31:0] $end
    $var wire  1 % inst_ce_i $end
    $var wire 32 G! inst_o [31:0] $end
    $var wire 32 $ pc_i [31:0] $end
    $var wire 19 U rom_addr4 [18:0] $end
    $var wire  1 E! rst_i $end
    $var wire  1 /! we_i $end
   $upscope $end
   $scope module exe0 $end
    $var wire 32 M b_j_jump_addr_o [31:0] $end
    $var wire  1 L b_j_jump_enable_o $end
    $var wire  3 I funct3 [2:0] $end
    $var wire  7 J funct7 [6:0] $end
    $var wire  5 . inst_addr_i [4:0] $end
    $var wire 32 - inst_i [31:0] $end
    $var wire 32 >! jump_addr_o [31:0] $end
    $var wire  1 w jump_enable_o $end
    $var wire 32 I! mem_addr_o [31:0] $end
    $var wire 32 J! mem_data_o [31:0] $end
    $var wire  4 K! mem_op_o [3:0] $end
    $var wire  1 H! mem_we_o $end
    $var wire 32 ) op1_i [31:0] $end
    $var wire 32 * op2_i [31:0] $end
    $var wire  7 H opcode [6:0] $end
    $var wire 32 N! r_reg_wdata_o [31:0] $end
    $var wire  1 O! r_reg_we_o $end
    $var wire  5 , reg_waddr_i [4:0] $end
    $var wire  5 '! reg_waddr_o [4:0] $end
    $var wire 32 )! reg_wdata_o [31:0] $end
    $var wire  1 + reg_we_i $end
    $var wire  1 (! reg_we_o $end
    $var wire  1 E! rst_i $end
    $var wire 32 @! s_l_mem_addr_o [31:0] $end
    $var wire 32 A! s_l_mem_data_o [31:0] $end
    $var wire  4 B! s_l_mem_op_o [3:0] $end
    $var wire  1 ?! s_l_mem_we_o $end
    $var wire 32 Q! s_l_reg_wdata_o [31:0] $end
    $var wire  1 C! s_l_reg_we_o $end
    $var wire  5 K shamt [4:0] $end
    $scope module exe_type_b_j0 $end
     $var wire  3 I funct3 [2:0] $end
     $var wire 32 R inst_addr_i [31:0] $end
     $var wire 32 - inst_i [31:0] $end
     $var wire 32 M jump_addr_o [31:0] $end
     $var wire  1 L jump_enable_o $end
     $var wire  1 S op1_eq_op2 $end
     $var wire 32 ) op1_i [31:0] $end
     $var wire 32 * op2_i [31:0] $end
     $var wire  7 H opcode [6:0] $end
     $var wire 32 R pc [31:0] $end
     $var wire  1 E! rst_i $end
    $upscope $end
    $scope module exe_type_r0 $end
     $var wire  3 I funct3 [2:0] $end
     $var wire  7 J funct7 [6:0] $end
     $var wire 32 - inst_i [31:0] $end
     $var wire  1 O isType_r $end
     $var wire 32 ) op1_i [31:0] $end
     $var wire 32 * op2_i [31:0] $end
     $var wire  7 H opcode [6:0] $end
     $var wire 32 N reg_waddr_i [31:0] $end
     $var wire 32 N! reg_wdata_o [31:0] $end
     $var wire  1 O! reg_we_o $end
     $var wire  1 E! rst_i $end
    $upscope $end
    $scope module exe_type_s_l0 $end
     $var wire  3 I funct3 [2:0] $end
     $var wire 32 - inst_i [31:0] $end
     $var wire 32 P load_addr_offset [31:0] $end
     $var wire 32 @! mem_addr_o [31:0] $end
     $var wire 32 A! mem_data_o [31:0] $end
     $var wire  4 B! mem_op_o [3:0] $end
     $var wire  1 ?! mem_we_o $end
     $var wire 32 ) op1_i [31:0] $end
     $var wire 32 * op2_i [31:0] $end
     $var wire  7 H opcode [6:0] $end
     $var wire 32 Q! reg_wdata_o [31:0] $end
     $var wire  1 C! reg_we_o $end
     $var wire  1 E! rst_i $end
     $var wire 32 Q store_addr_offset [31:0] $end
    $upscope $end
   $upscope $end
   $scope module exe_mem0 $end
    $var wire  1 F! clk_i $end
    $var wire 32 I! mem_addr_i [31:0] $end
    $var wire 32 3 mem_addr_o [31:0] $end
    $var wire 32 J! mem_data_i [31:0] $end
    $var wire 32 4 mem_data_o [31:0] $end
    $var wire  4 K! mem_op_i [3:0] $end
    $var wire  4 5 mem_op_o [3:0] $end
    $var wire  1 H! mem_we_i $end
    $var wire  1 2 mem_we_o $end
    $var wire  5 '! reg_waddr_i [4:0] $end
    $var wire  5 / reg_waddr_o [4:0] $end
    $var wire 32 )! reg_wdata_i [31:0] $end
    $var wire 32 1 reg_wdata_o [31:0] $end
    $var wire  1 (! reg_we_i $end
    $var wire  1 0 reg_we_o $end
    $var wire  1 E! rst_i $end
    $var wire  6 v stall_i [5:0] $end
   $upscope $end
   $scope module id0 $end
    $var wire  5 9 exe_rd_i [4:0] $end
    $var wire  5 '! exe_reg_waddr_i [4:0] $end
    $var wire 32 )! exe_reg_wdata_i [31:0] $end
    $var wire  1 (! exe_reg_we_i $end
    $var wire 32 9! i_op1_o [31:0] $end
    $var wire 32 :! i_op2_o [31:0] $end
    $var wire  5 5! i_reg1_raddr_o [4:0] $end
    $var wire  1 7! i_reg1_re_o $end
    $var wire  5 6! i_reg2_raddr_o [4:0] $end
    $var wire  1 8! i_reg2_re_o $end
    $var wire  5 <! i_reg_waddr_o [4:0] $end
    $var wire  1 ;! i_reg_we_o $end
    $var wire 32 & inst_addr_i [31:0] $end
    $var wire 32 2! inst_addr_o [31:0] $end
    $var wire 32 ' inst_i [31:0] $end
    $var wire 32 y inst_o [31:0] $end
    $var wire  1 ( is_load_hazard $end
    $var wire  5 +! mem_reg_waddr_i [4:0] $end
    $var wire 32 -! mem_reg_wdata_i [31:0] $end
    $var wire  1 ,! mem_reg_we_i $end
    $var wire 32 { op1_o [31:0] $end
    $var wire 32 3! op1_o_final [31:0] $end
    $var wire 32 | op2_o [31:0] $end
    $var wire 32 4! op2_o_final [31:0] $end
    $var wire  7 ; opcode [6:0] $end
    $var wire  1 : pre_inst_is_load_i $end
    $var wire 32 L! r_op1_o [31:0] $end
    $var wire 32 M! r_op2_o [31:0] $end
    $var wire  5 < r_reg1_raddr_o [4:0] $end
    $var wire  1 > r_reg1_re_o $end
    $var wire  5 = r_reg2_raddr_o [4:0] $end
    $var wire  1 ? r_reg2_re_o $end
    $var wire  5 A r_reg_waddr_o [4:0] $end
    $var wire  1 @ r_reg_we_o $end
    $var wire  5 B rd [4:0] $end
    $var wire  5 !! reg1_raddr_o [4:0] $end
    $var wire 32 %! reg1_rdata_i [31:0] $end
    $var wire  1 #! reg1_re_o $end
    $var wire  5 "! reg2_raddr_o [4:0] $end
    $var wire 32 &! reg2_rdata_i [31:0] $end
    $var wire  1 $! reg2_re_o $end
    $var wire  5 ~ reg_waddr_o [4:0] $end
    $var wire  1 } reg_we_o $end
    $var wire  5 C rs1 [4:0] $end
    $var wire  5 D rs2 [4:0] $end
    $var wire  1 E! rst_i $end
    $var wire  1 ( stallreq_o $end
    $scope module inst_type_i $end
     $var wire  3 E funct3 [2:0] $end
     $var wire 32 ' inst_i [31:0] $end
     $var wire 32 9! op1_o [31:0] $end
     $var wire 32 :! op2_o [31:0] $end
     $var wire  5 B rd [4:0] $end
     $var wire  5 5! reg1_raddr_o [4:0] $end
     $var wire 32 %! reg1_rdata_i [31:0] $end
     $var wire  1 7! reg1_re_o $end
     $var wire  5 6! reg2_raddr_o [4:0] $end
     $var wire 32 &! reg2_rdata_i [31:0] $end
     $var wire  1 8! reg2_re_o $end
     $var wire  5 <! reg_waddr_o [4:0] $end
     $var wire  1 ;! reg_we_o $end
     $var wire  5 C rs1 [4:0] $end
     $var wire  5 D rs2 [4:0] $end
    $upscope $end
    $scope module inst_type_r $end
     $var wire  3 E funct3 [2:0] $end
     $var wire  7 F funct7 [6:0] $end
     $var wire 32 ' inst_i [31:0] $end
     $var wire  1 G isType_r $end
     $var wire 32 L! op1_o [31:0] $end
     $var wire 32 M! op2_o [31:0] $end
     $var wire  7 ; opcode [6:0] $end
     $var wire  5 B rd [4:0] $end
     $var wire  5 < reg1_raddr_o [4:0] $end
     $var wire 32 %! reg1_rdata_i [31:0] $end
     $var wire  1 > reg1_re_o $end
     $var wire  5 = reg2_raddr_o [4:0] $end
     $var wire 32 &! reg2_rdata_i [31:0] $end
     $var wire  1 ? reg2_re_o $end
     $var wire  5 A reg_waddr_o [4:0] $end
     $var wire  1 @ reg_we_o $end
     $var wire  5 C rs1 [4:0] $end
     $var wire  5 D rs2 [4:0] $end
     $var wire  5 D shamt [4:0] $end
    $upscope $end
   $upscope $end
   $scope module id_exe0 $end
    $var wire  1 F! clk_i $end
    $var wire  1 w flush_jump_i $end
    $var wire  5 z inst_addr_i [4:0] $end
    $var wire  5 . inst_addr_o [4:0] $end
    $var wire 32 y inst_i [31:0] $end
    $var wire  1 : inst_is_load_o $end
    $var wire 32 - inst_o [31:0] $end
    $var wire 32 { op1_i [31:0] $end
    $var wire 32 ) op1_o [31:0] $end
    $var wire 32 | op2_i [31:0] $end
    $var wire 32 * op2_o [31:0] $end
    $var wire  7 =! opcode [6:0] $end
    $var wire  5 9 rd_o [4:0] $end
    $var wire  5 ~ reg_waddr_i [4:0] $end
    $var wire  5 , reg_waddr_o [4:0] $end
    $var wire  1 } reg_we_i $end
    $var wire  1 + reg_we_o $end
    $var wire  1 E! rst_i $end
    $var wire  6 v stall_i [5:0] $end
   $upscope $end
   $scope module if_id0 $end
    $var wire  1 F! clk_i $end
    $var wire  1 w flush_jump_i $end
    $var wire 32 $ inst_addr_i [31:0] $end
    $var wire 32 & inst_addr_o [31:0] $end
    $var wire 32 G! inst_i [31:0] $end
    $var wire 32 ' inst_o [31:0] $end
    $var wire  1 E! rst_i $end
    $var wire  6 v stall_i [5:0] $end
   $upscope $end
   $scope module mem0 $end
    $var wire 32 3 mem_addr_i [31:0] $end
    $var wire 32 4 mem_data_i [31:0] $end
    $var wire  4 5 mem_op_i [3:0] $end
    $var wire  1 2 mem_we_i $end
    $var wire 32 .! ram_addr_o [31:0] $end
    $var wire  2 T ram_addr_offset [1:0] $end
    $var wire 32 1! ram_data_i [31:0] $end
    $var wire 32 0! ram_data_o [31:0] $end
    $var wire  1 /! ram_w_request_o $end
    $var wire  5 / reg_waddr_i [4:0] $end
    $var wire  5 +! reg_waddr_o [4:0] $end
    $var wire 32 1 reg_wdata_i [31:0] $end
    $var wire 32 -! reg_wdata_o [31:0] $end
    $var wire  1 0 reg_we_i $end
    $var wire  1 ,! reg_we_o $end
    $var wire  1 E! rst_i $end
   $upscope $end
   $scope module mem_wb0 $end
    $var wire  1 F! clk_i $end
    $var wire  5 +! reg_waddr_i [4:0] $end
    $var wire  5 6 reg_waddr_o [4:0] $end
    $var wire 32 -! reg_wdata_i [31:0] $end
    $var wire 32 8 reg_wdata_o [31:0] $end
    $var wire  1 ,! reg_we_i $end
    $var wire  1 7 reg_we_o $end
    $var wire  1 E! rst_i $end
    $var wire  6 v stall_i [5:0] $end
   $upscope $end
   $scope module pc_reg0 $end
    $var wire  1 % ce_o $end
    $var wire  1 F! clk_i $end
    $var wire  1 w flush_jump_i $end
    $var wire 32 x new_pc_i [31:0] $end
    $var wire 32 $ pc_o [31:0] $end
    $var wire  1 E! rst_i $end
    $var wire  6 v stall_i [5:0] $end
   $upscope $end
   $scope module regfile0 $end
    $var wire  1 F! clk_i $end
    $var wire 32 # i [31:0] $end
    $var wire  5 !! raddr1_i [4:0] $end
    $var wire  5 "! raddr2_i [4:0] $end
    $var wire 32 %! rdata1_o [31:0] $end
    $var wire 32 &! rdata2_o [31:0] $end
    $var wire  1 #! re1_i $end
    $var wire  1 $! re2_i $end
    $var wire 32 V regs(0) [31:0] $end
    $var wire 32 W regs(1) [31:0] $end
    $var wire 32 ` regs(10) [31:0] $end
    $var wire 32 a regs(11) [31:0] $end
    $var wire 32 b regs(12) [31:0] $end
    $var wire 32 c regs(13) [31:0] $end
    $var wire 32 d regs(14) [31:0] $end
    $var wire 32 e regs(15) [31:0] $end
    $var wire 32 f regs(16) [31:0] $end
    $var wire 32 g regs(17) [31:0] $end
    $var wire 32 h regs(18) [31:0] $end
    $var wire 32 i regs(19) [31:0] $end
    $var wire 32 X regs(2) [31:0] $end
    $var wire 32 j regs(20) [31:0] $end
    $var wire 32 k regs(21) [31:0] $end
    $var wire 32 l regs(22) [31:0] $end
    $var wire 32 m regs(23) [31:0] $end
    $var wire 32 n regs(24) [31:0] $end
    $var wire 32 o regs(25) [31:0] $end
    $var wire 32 p regs(26) [31:0] $end
    $var wire 32 q regs(27) [31:0] $end
    $var wire 32 r regs(28) [31:0] $end
    $var wire 32 s regs(29) [31:0] $end
    $var wire 32 Y regs(3) [31:0] $end
    $var wire 32 t regs(30) [31:0] $end
    $var wire 32 u regs(31) [31:0] $end
    $var wire 32 Z regs(4) [31:0] $end
    $var wire 32 [ regs(5) [31:0] $end
    $var wire 32 \ regs(6) [31:0] $end
    $var wire 32 ] regs(7) [31:0] $end
    $var wire 32 ^ regs(8) [31:0] $end
    $var wire 32 _ regs(9) [31:0] $end
    $var wire  1 E! rst_i $end
    $var wire  5 6 waddr_i [4:0] $end
    $var wire 32 8 wdata_i [31:0] $end
    $var wire  1 7 we_i $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#5
b00000000000000000000000000100000 #
b00000000000000000000000000000000 $
0%
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
0(
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
0+
b00000 ,
b00000000000000000000000000000000 -
b00000 .
b00000 /
00
b00000000000000000000000000000000 1
02
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b0000 5
b00000 6
07
b00000000000000000000000000000000 8
b00000 9
0:
b0000000 ;
b00000 <
b00000 =
0>
0?
0@
b00000 A
b00000 B
b00000 C
b00000 D
b000 E
b0000000 F
0G
b0000000 H
b000 I
b0000000 J
b00000 K
0L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
0O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
1S
b00 T
b0000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b000000 v
0w
b00000000000000000000000000000000 x
b00000000000000000000000000010011 y
b00000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
0}
b00000 ~
b00000 !!
b00000 "!
0#!
0$!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000 '!
0(!
b00000000000000000000000000000000 )!
b00000 *!
b00000 +!
1,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
0/!
b00000000000000000000000000000000 0!
b00000000000000000000000000000000 1!
b00000000000000000000000000000000 2!
b00000000000000000000000000000000 3!
b00000000000000000000000000000000 4!
b00000 5!
b00000 6!
17!
08!
b00000000000000000000000000000000 9!
b00000000000000000000000000000000 :!
1;!
b00000 <!
b0010011 =!
b00000000000000000000000000000000 >!
0?!
b00000000000000000000000000000000 @!
b00000000000000000000000000000000 A!
b0000 B!
0C!
b0000000000000000000 D!
1E!
0F!
b00000000000000000000000000000000 G!
0H!
b00000000000000000000000000000000 I!
b00000000000000000000000000000000 J!
b0000 K!
b00000000000000000000000000000000 L!
b00000000000000000000000000000000 M!
b00000000000000000000000000000000 N!
0O!
0P!
b00000000000000000000000000000000 Q!
#10
b00000000000000000000000000010011 '
b00000000000000000000000000010011 -
10
17
b0010011 ;
b0010011 H
1F!
#15
0F!
#20
1F!
#25
0F!
#30
1F!
#35
0F!
#40
1F!
#45
0F!
#50
1F!
#55
1}
1#!
b00000000000100000000000110010011 1!
0E!
0F!
#60
1%
b00000000000000000000000000000000 '
1+
00
b0000000 ;
0}
0#!
1(!
0,!
1F!
b00000000000100000000000110010011 G!
#65
0F!
#70
b00000000000000000000000000000100 $
b00000000000100000000000110010011 '
0+
10
07
b0010011 ;
b00011 B
b00001 D
b0000000000000000100 U
b00000000000100000000000110010011 y
b00000000000000000000000000000001 |
1}
b00011 ~
1#!
0(!
1,!
b00000000000000000000000000000001 4!
b00000000000000000000000000000001 :!
b00011 <!
1F!
b00000000000100000000000100010011 G!
#75
0F!
#80
b00000000000000000000000000001000 $
b00000000000000000000000000000100 &
b00000000000100000000000100010011 '
b00000000000000000000000000000001 *
1+
b00011 ,
b00000000000100000000000110010011 -
00
17
b00011 9
b00010 B
b00001 K
b00000000000000000000000000000011 N
b00000000000000000000000000000001 P
b00000000000000000000000000000011 Q
0S
b0000000000000001000 U
b00000000000100000000000100010011 y
b00010 ~
b00011 '!
1(!
b00000000000000000000000000000001 )!
0,!
b00010 <!
1F!
b00000000001100010000100001100011 G!
#85
0F!
#90
b00000000000000000000000000001100 $
b00000000000000000000000000001000 &
b00000000001100010000100001100011 '
b00010 ,
b00000000000100000000000100010011 -
b00011 /
10
b00000000000000000000000000000001 1
07
b00010 9
b1100011 ;
b10000 B
b00010 C
b00011 D
b00000000000000000000000000000010 N
b00000000000000000000000000000010 Q
b0000000000000001100 U
b00000000001100010000100001100011 y
b01000 z
b00000000000000000000000000000001 {
0}
b00000 ~
b00010 !!
b00011 "!
1$!
b00010 '!
b00011 +!
1,!
b00000000000000000000000000000001 -!
b00000000000000000000000000001000 2!
b00000000000000000000000000000000 4!
b00010 5!
b00000000000000000000000000000011 :!
b10000 <!
b1100011 =!
1F!
b00000000000100000000010100010011 G!
#95
0F!
#100
b00000000000000000000000000010000 $
b00000000000000000000000000001100 &
b00000000000100000000010100010011 '
b00000000000000000000000000000001 )
0+
b00000 ,
b00000000001100010000100001100011 -
b01000 .
b00010 /
b00011 6
17
b00000000000000000000000000000001 8
b10000 9
b0010011 ;
b01010 B
b00000 C
b00001 D
b1100011 H
b00011 K
1L
b00000000000000000000000000011000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000011 P
b00000000000000000000000000010000 Q
b00000000000000000000000000001000 R
1S
b0000000000000010000 U
1w
b00000000000000000000000000011000 x
b00000000000100000000010100010011 y
b00000 z
b00000000000000000000000000000000 {
1}
b01010 ~
b00000 !!
b00000 "!
0$!
b00000 '!
0(!
b00000000000000000000000000000000 )!
b11000 *!
b00010 +!
b00000000000000000000000000000000 2!
b00000000000000000000000000000001 4!
b00000 5!
b00000000000000000000000000000001 :!
b01010 <!
b0010011 =!
b00000000000000000000000000011000 >!
1F!
b00000000001100000000010110010011 G!
#105
0F!
#110
b00000000000000000000000000011000 $
b00000000000000000000000000000000 &
b00000000000000000000000000010011 '
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000010011 -
b00000 .
b00000 /
00
b00000000000000000000000000000000 1
b00010 6
b00000 9
b00000 B
b00000 D
b0010011 H
b00000 K
0L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b0000000000000011000 U
b00000000000000000000000000000001 Y
0w
b00000000000000000000000000000000 x
b00000000000000000000000000010011 y
b00000000000000000000000000000000 |
b00000 ~
b00000 *!
b00000 +!
0,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 4!
b00000000000000000000000000000000 :!
b00000 <!
b00000000000000000000000000000000 >!
1F!
b00000000000100000000010000010011 G!
#115
0F!
#120
b00000000000000000000000000011100 $
b00000000000000000000000000011000 &
b00000000000100000000010000010011 '
1+
b00000 6
07
b00000000000000000000000000000000 8
b01000 B
b00001 D
b0000000000000011100 U
b00000000000000000000000000000001 X
b00000000000100000000010000010011 y
b00000000000000000000000000000001 |
b01000 ~
1(!
b00000000000000000000000000000001 4!
b00000000000000000000000000000001 :!
b01000 <!
1F!
b00000000001000000000010010010011 G!
#125
0F!
#130
b00000000000000000000000000100000 $
b00000000000000000000000000011100 &
b00000000001000000000010010010011 '
b00000000000000000000000000000001 *
b01000 ,
b00000000000100000000010000010011 -
10
b01000 9
b01001 B
b00010 D
b00001 K
b00000000000000000000000000001000 N
b00000000000000000000000000000001 P
b00000000000000000000000000001000 Q
0S
b0000000000000100000 U
b00000000001000000000010010010011 y
b00000000000000000000000000000010 |
b01001 ~
b01000 '!
b00000000000000000000000000000001 )!
1,!
b00000000000000000000000000000010 4!
b00000000000000000000000000000010 :!
b01001 <!
1F!
b00000000000000000000000000000000 G!
#135
0F!
#140
b00000000000000000000000000100100 $
b00000000000000000000000000100000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000010 *
b01001 ,
b00000000001000000000010010010011 -
b01000 /
b00000000000000000000000000000001 1
17
b01001 9
b0000000 ;
b00000 B
b00000 D
b00010 K
b00000000000000000000000000001001 N
b00000000000000000000000000000010 P
b00000000000000000000000000001001 Q
b0000000000000100100 U
b00000000000000000000000000010011 y
b00000000000000000000000000000000 |
0}
b00000 ~
0#!
b01001 '!
b00000000000000000000000000000010 )!
b01000 +!
b00000000000000000000000000000001 -!
b00000000000000000000000000000000 4!
b00000000000000000000000000000000 :!
b00000 <!
1F!
#145
0F!
#150
b00000000000000000000000000101000 $
b00000000000000000000000000100100 &
b00000000000000000000000000000000 *
0+
b00000 ,
b00000000000000000000000000010011 -
b01001 /
b00000000000000000000000000000010 1
b01000 6
b00000000000000000000000000000001 8
b00000 9
b00000 K
b00000000000000000000000000000000 N
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
1S
b0000000000000101000 U
b00000 '!
0(!
b00000000000000000000000000000000 )!
b01001 +!
b00000000000000000000000000000010 -!
1F!
#155
0F!
#160
b00000000000000000000000000101100 $
b00000000000000000000000000101000 &
b00000 /
00
b00000000000000000000000000000000 1
b01001 6
b00000000000000000000000000000010 8
b0000000000000101100 U
b00000000000000000000000000000001 ^
b00000 +!
0,!
b00000000000000000000000000000000 -!
1F!
#165
0F!
#170
b00000000000000000000000000110000 $
b00000000000000000000000000101100 &
b00000 6
07
b00000000000000000000000000000000 8
b0000000000000110000 U
b00000000000000000000000000000010 _
1F!
#175
0F!
#180
b00000000000000000000000000110100 $
b00000000000000000000000000110000 &
b0000000000000110100 U
1F!
#185
0F!
#190
b00000000000000000000000000111000 $
b00000000000000000000000000110100 &
b0000000000000111000 U
1F!
#195
0F!
#200
b00000000000000000000000000111100 $
b00000000000000000000000000111000 &
b0000000000000111100 U
1F!
#205
0F!
#210
b00000000000000000000000001000000 $
b00000000000000000000000000111100 &
b0000000000001000000 U
1F!
#215
0F!
#220
b00000000000000000000000001000100 $
b00000000000000000000000001000000 &
b0000000000001000100 U
1F!
#225
0F!
#230
b00000000000000000000000001001000 $
b00000000000000000000000001000100 &
b0000000000001001000 U
1F!
#235
0F!
#240
b00000000000000000000000001001100 $
b00000000000000000000000001001000 &
b0000000000001001100 U
1F!
#245
0F!
#250
b00000000000000000000000001010000 $
b00000000000000000000000001001100 &
b0000000000001010000 U
1F!
